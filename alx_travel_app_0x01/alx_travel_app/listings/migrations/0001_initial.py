# Generated by Django 5.1.4 on 2025-05-30 13:05

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Listing',
            fields=[
                ('listing_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the listing', primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Name/title of the listing', max_length=200)),
                ('description', models.TextField(help_text='Detailed description of the listing')),
                ('location', models.CharField(help_text='Location of the listing (city, country)', max_length=200)),
                ('price_per_night', models.DecimalField(decimal_places=2, help_text='Price per night in USD', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('property_type', models.CharField(choices=[('hotel', 'Hotel'), ('apartment', 'Apartment'), ('house', 'House'), ('villa', 'Villa'), ('resort', 'Resort'), ('hostel', 'Hostel'), ('guesthouse', 'Guest House')], default='apartment', help_text='Type of property', max_length=20)),
                ('max_guests', models.PositiveIntegerField(default=1, help_text='Maximum number of guests allowed', validators=[django.core.validators.MinValueValidator(1)])),
                ('bedrooms', models.PositiveIntegerField(default=1, help_text='Number of bedrooms')),
                ('bathrooms', models.PositiveIntegerField(default=1, help_text='Number of bathrooms')),
                ('amenities', models.TextField(blank=True, help_text='List of amenities (comma-separated)')),
                ('available', models.BooleanField(default=True, help_text='Whether the listing is available for booking')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When the listing was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When the listing was last updated')),
                ('host', models.ForeignKey(help_text='The user who created this listing', on_delete=django.db.models.deletion.CASCADE, related_name='listings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('booking_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the booking', primary_key=True, serialize=False)),
                ('check_in_date', models.DateField(help_text='Check-in date')),
                ('check_out_date', models.DateField(help_text='Check-out date')),
                ('number_of_guests', models.PositiveIntegerField(default=1, help_text='Number of guests for this booking', validators=[django.core.validators.MinValueValidator(1)])),
                ('total_price', models.DecimalField(decimal_places=2, help_text='Total price for the booking', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed'), ('cancelled', 'Cancelled'), ('completed', 'Completed')], default='pending', help_text='Current status of the booking', max_length=20)),
                ('special_requests', models.TextField(blank=True, help_text='Any special requests from the guest')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When the booking was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When the booking was last updated')),
                ('user', models.ForeignKey(help_text='The user making the booking', on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to=settings.AUTH_USER_MODEL)),
                ('listing', models.ForeignKey(help_text='The listing being booked', on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='listings.listing')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('review_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the review', primary_key=True, serialize=False)),
                ('rating', models.IntegerField(help_text='Rating from 1 to 5 stars', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('comment', models.TextField(help_text='Written review comment')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When the review was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When the review was last updated')),
                ('booking', models.OneToOneField(blank=True, help_text='The booking this review is associated with', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='review', to='listings.booking')),
                ('listing', models.ForeignKey(help_text='The listing being reviewed', on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='listings.listing')),
                ('user', models.ForeignKey(help_text='The user writing the review', on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='listing',
            index=models.Index(fields=['location'], name='listings_li_locatio_4bc07d_idx'),
        ),
        migrations.AddIndex(
            model_name='listing',
            index=models.Index(fields=['property_type'], name='listings_li_propert_7a505c_idx'),
        ),
        migrations.AddIndex(
            model_name='listing',
            index=models.Index(fields=['price_per_night'], name='listings_li_price_p_278f5d_idx'),
        ),
        migrations.AddIndex(
            model_name='listing',
            index=models.Index(fields=['available'], name='listings_li_availab_f5f929_idx'),
        ),
        migrations.AddIndex(
            model_name='booking',
            index=models.Index(fields=['check_in_date'], name='listings_bo_check_i_c96d06_idx'),
        ),
        migrations.AddIndex(
            model_name='booking',
            index=models.Index(fields=['check_out_date'], name='listings_bo_check_o_03286c_idx'),
        ),
        migrations.AddIndex(
            model_name='booking',
            index=models.Index(fields=['status'], name='listings_bo_status_8650c6_idx'),
        ),
        migrations.AddConstraint(
            model_name='booking',
            constraint=models.CheckConstraint(condition=models.Q(('check_out_date__gt', models.F('check_in_date'))), name='check_out_after_check_in'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['rating'], name='listings_re_rating_d53460_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['created_at'], name='listings_re_created_4808d6_idx'),
        ),
        migrations.AddConstraint(
            model_name='review',
            constraint=models.UniqueConstraint(fields=('listing', 'user'), name='unique_user_listing_review'),
        ),
    ]
